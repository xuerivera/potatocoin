{
  "version": 3,
  "sources": ["../../@arrow-js/core/src/common.ts", "../../@arrow-js/core/src/reactive.ts", "../../@arrow-js/core/src/html.ts", "../../@arrow-js/core/src/index.ts"],
  "sourcesContent": ["/**\n * A queue of expressions to run as soon as an async slot opens up.\n */\nconst queueStack = new Set();\n/**\n * A stack of functions to run on the next tick.\n */\nconst nextTicks = new Set();\n/**\n * Adds the ability to listen to the next tick.\n * @param  {CallableFunction} fn?\n * @returns Promise\n */\nexport function nextTick(fn) {\n    if (!queueStack.size) {\n        if (fn)\n            fn();\n        return Promise.resolve();\n    }\n    let resolve;\n    const p = new Promise((r) => {\n        resolve = r;\n    });\n    nextTicks.add(() => {\n        if (fn)\n            fn();\n        resolve();\n    });\n    return p;\n}\nexport function isTpl(template) {\n    return typeof template === 'function' && !!template.isT;\n}\nexport function isR(obj) {\n    return (typeof obj === 'object' &&\n        obj !== null &&\n        '$on' in obj &&\n        typeof obj.$on === 'function');\n}\n/**\n * Utility that ensures we only attempt to make reactive objects that _can_ be made reactive.\n *\n * Examples of objects that cause issues: NodeList, HTMLElement\n * @see {@link https://github.com/vuejs/core/blob/8998afa42755cbdb3403cd6c0fe158980da8492c/packages/reactivity/src/reactive.ts#L43-L62}\n */\n// export function canReactiveWrap(maybeObj: any): boolean {\n//   return ['Object', 'Array'].includes(\n//     // from https://github.com/vuejs/core/blob/8998afa42755cbdb3403cd6c0fe158980da8492c/packages/shared/src/general.ts#L64-L67\n//     // extracts \"Type\" from \"[object Type]\"\n//     Object.prototype.toString.call(maybeObj).slice(8, -1)\n//   )\n// }\nexport function isReactiveFunction(fn) {\n    return '$on' in fn;\n}\n/**\n * Queue an item to execute after all synchronous functions have been run. This\n * is used for `w()` to ensure multiple dependency mutations tracked on the\n * same expression do not result in multiple calls.\n * @param  {CallableFunction} fn\n * @returns ObserverCallback\n */\nexport function queue(fn) {\n    return (newValue, oldValue) => {\n        function executeQueue() {\n            // copy the current queues and clear it to allow new items to be added\n            // during the execution of the current queue.\n            const queue = Array.from(queueStack);\n            queueStack.clear();\n            const ticks = Array.from(nextTicks);\n            nextTicks.clear();\n            queue.forEach((fn) => fn(newValue, oldValue));\n            ticks.forEach((fn) => fn());\n            if (queueStack.size) {\n                // we received new items while executing the queue, so we need to\n                // execute the queue again.\n                queueMicrotask(executeQueue);\n            }\n        }\n        if (!queueStack.size) {\n            queueMicrotask(executeQueue);\n        }\n        queueStack.add(fn);\n    };\n}\nexport const measurements = {};\n/**\n * A simple benchmarking function.\n * @param label - A label for the measurement\n * @param fn - A function to measure or a number to record\n * @returns\n */\nexport function measure(label, fn) {\n    const start = performance.now();\n    const isFn = typeof fn === 'function';\n    label = isFn ? `${label} (ms)` : `${label} (calls)`;\n    const x = isFn ? fn() : fn;\n    const result = isFn ? performance.now() - start : fn;\n    if (!measurements[label])\n        measurements[label] = [result];\n    else\n        measurements[label].push(result);\n    return x;\n}\n", "import { isR, queue, isReactiveFunction } from './common';\n/**\n * A \"global\" dependency tracker object.\n */\nconst dependencyCollector = new Map();\n/**\n * Given a data object, often an object literal, return a proxy of that object\n * with mutation observers for each property.\n *\n * @param  {DataSource} data\n * @returns ReactiveProxy\n */\nexport function r(data, state = {}) {\n    // If this is already reactive, a non object, or an object than shouldn't be made reactive just return it.\n    if (isR(data) || typeof data !== 'object')\n        return data;\n    // This is the observer registry itself, with properties as keys and callbacks as watchers.\n    const observers = state.o || new Map();\n    // This is a reverse map of observers with callbacks as keys and properties that callback is watching as values.\n    const observerProperties = state.op || new Map();\n    // If the data is an array, we should know...but only once.\n    const isArray = Array.isArray(data);\n    const children = [];\n    const proxySource = isArray ? [] : Object.create(data, {});\n    for (const property in data) {\n        const entry = data[property];\n        if (typeof entry === 'object' && entry !== null) {\n            proxySource[property] = !isR(entry) ? r(entry) : entry;\n            children.push(property);\n        }\n        else {\n            proxySource[property] = entry;\n        }\n    }\n    // The add/remove dependency function(s)\n    const dep = (a) => (p, c) => {\n        let obs = observers.get(p);\n        let props = observerProperties.get(c);\n        if (!obs) {\n            obs = new Set();\n            observers.set(p, obs);\n        }\n        if (!props) {\n            props = new Set();\n            observerProperties.set(c, props);\n        }\n        obs[a](c);\n        props[a](p);\n    };\n    // Add a property listener\n    const $on = dep('add');\n    // Remove a property listener\n    const $off = dep('delete');\n    // Emit a property mutation event by calling all sub-dependencies.\n    const _em = (property, newValue, oldValue) => {\n        observers.has(property) &&\n            observers.get(property).forEach((c) => c(newValue, oldValue));\n    };\n    /**\n     * Return the reactive proxy state data.\n     */\n    const _st = () => {\n        return {\n            o: observers,\n            op: observerProperties,\n            r: proxySource,\n            p: proxy._p,\n        };\n    };\n    // These are the internal properties of all `r()` objects.\n    const depProps = {\n        $on,\n        $off,\n        _em,\n        _st,\n        _p: undefined,\n    };\n    // Create the actual proxy object itself.\n    const proxy = new Proxy(proxySource, {\n        has(target, key) {\n            return key in depProps || key in target;\n        },\n        get(...args) {\n            const [, p] = args;\n            // For properties of the DependencyProps type, return their values from\n            // the depProps instead of the target.\n            if (Reflect.has(depProps, p))\n                return Reflect.get(depProps, p);\n            const value = Reflect.get(...args);\n            // For any existing dependency collectors that are active, add this\n            // property to their observed properties.\n            addDep(proxy, p);\n            // We have special handling of array operations to prevent O(n^2) issues.\n            if (isArray && p in Array.prototype) {\n                return arrayOperation(p, proxySource, proxy, value);\n            }\n            return value;\n        },\n        set(...args) {\n            const [target, property, value] = args;\n            const old = Reflect.get(target, property);\n            if (Reflect.has(depProps, property)) {\n                // We are setting a reserved property like _p\n                return Reflect.set(depProps, property, value);\n            }\n            if (value && isR(old)) {\n                const o = old;\n                // We're assigning an object (array or pojo probably), so we want to be\n                // reactive, but if we already have a reactive object in this\n                // property, then we need to replace it and transfer the state of deps.\n                const oldState = o._st();\n                const newR = isR(value) ? reactiveMerge(value, o) : r(value, oldState);\n                Reflect.set(target, property, \n                // Create a new reactive object\n                newR);\n                _em(property, newR);\n                oldState.o.forEach((_c, property) => {\n                    const oldValue = Reflect.get(old, property);\n                    const newValue = Reflect.get(newR, property);\n                    if (oldValue !== newValue) {\n                        o._em(property, newValue, oldValue);\n                    }\n                });\n                return true;\n            }\n            const didSet = Reflect.set(...args);\n            if (didSet) {\n                if (old !== value) {\n                    // Notify any discrete property observers of the change.\n                    _em(property, value, old);\n                }\n                if (proxy._p) {\n                    // Notify parent observers of a change.\n                    proxy._p[1]._em(...proxy._p);\n                }\n            }\n            return didSet;\n        },\n    });\n    if (state.p)\n        proxy._p = state.p;\n    // Before we return the proxy object, quickly map through the children\n    // and set the parents (this is only run on the initial setup).\n    children.map((c) => {\n        proxy[c]._p = [c, proxy];\n    });\n    return proxy;\n}\n/**\n * Add a property to the tracked reactive properties.\n * @param  {ReactiveProxy} proxy\n * @param  {DataSourceKey} property\n */\nfunction addDep(proxy, property) {\n    dependencyCollector.forEach((tracker) => {\n        let properties = tracker.get(proxy);\n        if (!properties) {\n            properties = new Set();\n            tracker.set(proxy, properties);\n        }\n        properties.add(property);\n    });\n}\nfunction arrayOperation(op, arr, proxy, native) {\n    const synthetic = (...args) => {\n        // The `as DataSource` here should really be the ArrayPrototype, but we're\n        // just tricking the compiler since we've already checked it.\n        const retVal = Array.prototype[op].call(arr, ...args);\n        // @todo determine how to handle notifying elements and parents of elements.\n        arr.forEach((item, i) => proxy._em(String(i), item));\n        // Notify the the parent of changes.\n        if (proxy._p) {\n            const [property, parent] = proxy._p;\n            parent._em(property, proxy);\n        }\n        return retVal;\n    };\n    switch (op) {\n        case 'shift':\n        case 'pop':\n        case 'sort':\n        case 'reverse':\n        case 'copyWithin':\n            return synthetic;\n        case 'unshift':\n        case 'push':\n        case 'fill':\n            return (...args) => synthetic(...args.map((arg) => r(arg)));\n        case 'splice':\n            return function (start, remove, ...inserts) {\n                // Preserve the argument count when there's only one argument,\n                // because if a second argument is passed but undefined,\n                // it gets treated as 0.\n                return arguments.length === 1\n                    ? synthetic(start)\n                    : synthetic(start, remove, ...inserts.map((arg) => r(arg)));\n            };\n        default:\n            return native;\n    }\n}\n/**\n * Given two reactive proxies, merge the important state attributes from the\n * source into the target.\n * @param  {ReactiveProxy} reactiveTarget\n * @param  {ReactiveProxy} reactiveSource\n * @returns ReactiveProxy\n */\nfunction reactiveMerge(reactiveTarget, reactiveSource) {\n    const state = reactiveSource._st();\n    if (state.o) {\n        state.o.forEach((callbacks, property) => {\n            callbacks.forEach((c) => {\n                reactiveTarget.$on(property, c);\n            });\n        });\n    }\n    if (state.p) {\n        reactiveTarget._p = state.p;\n    }\n    return reactiveTarget;\n}\n/**\n * Watch a function and track any reactive dependencies on it, re-calling it if\n * those dependencies are changed.\n * @param  {CallableFunction} fn\n * @param  {CallableFunction} after?\n * @returns unknown\n */\nexport function w(fn, after) {\n    const trackingId = Symbol();\n    if (!dependencyCollector.has(trackingId)) {\n        dependencyCollector.set(trackingId, new Map());\n    }\n    let currentDeps = new Map();\n    const queuedCallFn = queue(callFn);\n    function callFn() {\n        dependencyCollector.set(trackingId, new Map());\n        const value = fn();\n        const newDeps = dependencyCollector.get(trackingId);\n        dependencyCollector.delete(trackingId);\n        // Disable existing properties\n        currentDeps.forEach((propertiesToUnobserve, proxy) => {\n            const newProperties = newDeps.get(proxy);\n            if (newProperties) {\n                newProperties.forEach((prop) => propertiesToUnobserve.delete(prop));\n            }\n            propertiesToUnobserve.forEach((prop) => proxy.$off(prop, queuedCallFn));\n        });\n        // Start observing new properties.\n        newDeps.forEach((properties, proxy) => {\n            properties.forEach((prop) => proxy.$on(prop, queuedCallFn));\n        });\n        currentDeps = newDeps;\n        return after ? after(value) : value;\n    }\n    // If this is a reactive function, then when the expression is updated, re-run\n    if (isReactiveFunction(fn))\n        fn.$on(callFn);\n    return callFn();\n}\n", "import { w } from './reactive';\nimport { isTpl, measure } from './common';\n/**\n * Event listeners that were bound by arrow and should be cleaned up should the\n * given node be garbage collected.\n */\nconst listeners = new WeakMap();\n/**\n * A list of HTML templates to a HTMLTemplate element that contains instances\n * of each. This acts as a cache.\n */\nconst templateMemo = {};\n/**\n * The delimiter that describes where expressions are located.\n */\nconst delimiter = '➳❍';\nconst bookend = '❍⇚';\nconst delimiterComment = `<!--${delimiter}-->`;\nconst bookendComment = `<!--${bookend}-->`;\n/**\n * The template tagging function, used like: html`<div></div>`(mountEl)\n * @param  {TemplateStringsArray} strings\n * @param  {any[]} ...expressions\n * @returns ArrowTemplate\n */\nexport function t(strings, ...expSlots) {\n    const expressions = [];\n    let str = '';\n    const addExpressions = (expression, html) => {\n        if (typeof expression === 'function') {\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            let observer = () => { };\n            expressions.push(Object.assign((...args) => expression(...args), {\n                e: expression,\n                $on: (obs) => {\n                    observer = obs;\n                },\n                _up: (exp) => {\n                    expression = exp;\n                    observer();\n                },\n            }));\n            return html + delimiterComment;\n        }\n        if (Array.isArray(expression)) {\n            return expression.reduce((html, exp) => addExpressions(exp, html), html);\n        }\n        return html + expression;\n    };\n    const toString = () => {\n        if (!str) {\n            if (!expSlots.length && strings.length === 1 && strings[0] === '') {\n                str = '<!---->';\n            }\n            else {\n                str = strings.reduce(function interlaceTemplate(html, strVal, i) {\n                    html += strVal;\n                    return expSlots[i] !== undefined\n                        ? addExpressions(expSlots[i], html)\n                        : html;\n                }, '');\n            }\n        }\n        return str;\n    };\n    const template = (el) => {\n        const dom = createNodes(toString());\n        const frag = fragment(dom, { i: 0, e: expressions });\n        return el ? frag(el) : frag();\n    };\n    // If the template contains no expressions, it is 100% static so it's key\n    // its own content\n    template.isT = true;\n    template._k = 0;\n    template._h = () => [toString(), expressions, template._k];\n    template.key = (key) => {\n        template._k = key;\n        return template;\n    };\n    return template;\n}\n/**\n * @param  {NodeList} dom\n * @param  {ReactiveExpressions} tokens\n * @param  {ReactiveProxy} data?\n */\nfunction fragment(dom, expressions) {\n    let node;\n    let i = 0;\n    const children = dom.childNodes;\n    while ((node = children.item(i++))) {\n        // Delimiters in the body are found inside comments.\n        if (node.nodeType === 8 && node.nodeValue === delimiter) {\n            // We are dealing with a reactive node.\n            comment(node, expressions);\n            continue;\n        }\n        // Bind attributes, add events, and push onto the fragment.\n        if (node instanceof Element)\n            attrs(node, expressions);\n        if (node.hasChildNodes()) {\n            fragment(node, expressions);\n        }\n        // Select lists \"default\" selections get out of wack when being moved around\n        // inside fragments, this resets them.\n        if (node instanceof HTMLOptionElement)\n            node.selected = node.defaultSelected;\n    }\n    return ((parent) => {\n        if (parent) {\n            parent.appendChild(dom);\n            return parent;\n        }\n        return dom;\n    });\n}\n/**\n * Given a node, parse for meaningful expressions.\n * @param  {Element} node\n * @returns void\n */\nfunction attrs(node, expressions) {\n    var _a;\n    const toRemove = [];\n    let i = 0;\n    let attr;\n    while ((attr = node.attributes[i++])) {\n        if (expressions.i >= expressions.e.length)\n            return;\n        if (attr.value !== delimiterComment)\n            continue;\n        let attrName = attr.name;\n        const expression = expressions.e[expressions.i++];\n        if (attrName.charAt(0) === '@') {\n            const event = attrName.substring(1);\n            node.addEventListener(event, expression);\n            if (!listeners.has(node))\n                listeners.set(node, new Map());\n            (_a = listeners.get(node)) === null || _a === void 0 ? void 0 : _a.set(event, expression);\n            toRemove.push(attrName);\n        }\n        else {\n            // Logic to determine if this is an IDL attribute or a content attribute\n            const isIDL = (attrName === 'value' && 'value' in node) ||\n                attrName === 'checked' ||\n                (attrName.startsWith('.') && (attrName = attrName.substring(1)));\n            w(expression, (value) => {\n                if (isIDL) {\n                    // Handle all IDL attributes, TS won’t like this since it is not\n                    // fully aware of the type we are operating on, but JavaScript is\n                    // perfectly fine with it, so we need to ignore TS here.\n                    // @ts-ignore:next-line\n                    node[attrName] = value;\n                    // Explicitly set the \"value\" to false remove the attribute. However\n                    // we need to be sure this is not a \"Reflected\" attribute, so we check\n                    // the current value of the attribute to make sure it is not the same\n                    // as the value we just set. If it is the same, it must be reflected.\n                    // so removing the attribute would remove the idl we just set.\n                    if (node.getAttribute(attrName) != value)\n                        value = false;\n                }\n                // Set a standard content attribute.\n                value !== false\n                    ? node.setAttribute(attrName, value)\n                    : (node.removeAttribute(attrName), i--);\n            });\n        }\n    }\n    toRemove.forEach((attrName) => node.removeAttribute(attrName));\n}\n/**\n * Removes DOM nodes from the dom and cleans up any attached listeners.\n * @param node - A DOM element to remove\n */\nfunction removeNodes(node) {\n    node.forEach(removeNode);\n}\n/**\n * Removes the node from the dom and cleans up any attached listeners.\n * @param node - A DOM element to remove\n */\nfunction removeNode(node) {\n    var _a;\n    node.remove();\n    (_a = listeners\n        .get(node)) === null || _a === void 0 ? void 0 : _a.forEach((listener, event) => node.removeEventListener(event, listener));\n}\n/**\n * Given a textNode, parse the node for expressions and return a fragment.\n * @param  {Node} node\n * @param  {ReactiveProxy} data\n * @param  {ReactiveExpressions} tokens\n * @returns DocumentFragment\n */\nfunction comment(node, expressions) {\n    var _a;\n    // At this point, we know we're dealing with some kind of reactive token fn\n    const expression = expressions.e[expressions.i++];\n    let boundNode;\n    if (expression && isTpl(expression.e)) {\n        // If the expression is an html`` (ArrowTemplate), then call it with data\n        // and then call the ArrowTemplate with no parent, so we get the nodes.\n        boundNode = createPartial().add(expression.e)();\n    }\n    else {\n        // This is where the *actual* reactivity takes place:\n        let partialMemo;\n        boundNode = (partialMemo = w(expression, (value) => setNode(value, partialMemo)))();\n    }\n    (_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(boundNode, node);\n}\n/**\n * Set the value of a given node.\n * @param  {Node} n\n * @param  {any} value\n * @param  {ReactiveProxy} data\n * @returns Node\n */\nfunction setNode(value, p) {\n    const isUpdate = typeof p === 'function';\n    const partial = isUpdate ? p : createPartial();\n    Array.isArray(value)\n        ? value.forEach((item) => measure('partialAdd', () => partial.add(item)))\n        : partial.add(value);\n    if (isUpdate)\n        partial._up();\n    return partial;\n}\n/**\n * Given an HTML string, produce actual DOM elements.\n * @param html - a string of html\n * @returns\n */\nfunction createNodes(html) {\n    var _a;\n    const tpl = (_a = templateMemo[html]) !== null && _a !== void 0 ? _a : (() => {\n        const tpl = document.createElement('template');\n        tpl.innerHTML = html;\n        return (templateMemo[html] = tpl);\n    })();\n    const dom = tpl.content.cloneNode(true);\n    dom.normalize(); // textNodes are automatically split somewhere around 65kb, this joins them back together.\n    return dom;\n}\n/**\n * Template partials are stateful functions that perform a fragment render when\n * called, but also have function properties like ._up() which attempts to only\n * perform a patch of the previously rendered nodes.\n * @returns TemplatePartial\n */\nfunction createPartial(group = Symbol()) {\n    let html = '';\n    let expressions = { i: 0, e: [] };\n    let chunks = [];\n    let previousChunks = [];\n    const keyedChunks = new Map();\n    const toRemove = [];\n    /**\n     * This is the actual document partial function.\n     */\n    const partial = () => {\n        let dom;\n        if (!chunks.length)\n            addPlaceholderChunk();\n        if (chunks.length === 1 && !isTpl(chunks[0].tpl)) {\n            // In this case we have only a textNode to render, so we can just return\n            // the text node with the proper value applied.\n            const chunk = chunks[0];\n            chunk.dom.length\n                ? (chunk.dom[0].nodeValue = chunk.tpl)\n                : chunk.dom.push(document.createTextNode(chunk.tpl));\n            dom = chunk.dom[0];\n        }\n        else {\n            dom = assignDomChunks(fragment(createNodes(html), expressions)());\n        }\n        reset();\n        return dom;\n    };\n    partial.ch = () => previousChunks;\n    partial.l = 0;\n    partial.add = (tpl) => {\n        if (!tpl && tpl !== 0)\n            return partial;\n        // If the tpl is a string or a number it means the result should be a\n        // textNode — in that case we do *not* want to generate any DOM nodes for it\n        // so here we want to ensure that `html` is just ''.\n        let localExpressions = [];\n        let key;\n        let template = '';\n        if (isTpl(tpl)) {\n            ;\n            [template, localExpressions, key] = tpl._h();\n        }\n        html += template;\n        html += bookendComment;\n        const keyedChunk = key && keyedChunks.get(key);\n        const chunk = keyedChunk || {\n            html: template,\n            exp: localExpressions,\n            dom: [],\n            tpl,\n            key,\n        };\n        chunks.push(chunk);\n        if (key) {\n            // Since this is a keyed chunk, we need to either add it to the\n            // keyedChunks map, or we need to update the expressions in that chunk.\n            keyedChunk\n                ? keyedChunk.exp.forEach((exp, i) => exp._up(localExpressions[i].e))\n                : keyedChunks.set(key, chunk);\n        }\n        expressions.e.push(...localExpressions);\n        partial.l++;\n        return partial;\n    };\n    partial._up = () => {\n        const subPartial = createPartial(group);\n        let startChunking = 0;\n        let lastNode = previousChunks[0].dom[0];\n        // If this is an empty update, we need to \"placehold\" its spot in the dom\n        // with an empty placeholder chunk.\n        if (!chunks.length)\n            addPlaceholderChunk(document.createComment(''));\n        const closeSubPartial = () => {\n            if (!subPartial.l)\n                return;\n            const frag = subPartial();\n            const last = frag.lastChild;\n            lastNode[startChunking ? 'after' : 'before'](frag);\n            transferChunks(subPartial, chunks, startChunking);\n            lastNode = last;\n        };\n        chunks.forEach((chunk, index) => {\n            // There are a few things that can happen in here:\n            // 1. We match a key and output previously rendered nodes.\n            // 2. We use a previous rendered dom, and swap the expression.\n            // 3. The actual HTML chunk is changed/new so we need to remove the nodes.\n            // 4. We render totally new nodes using a partial.\n            const prev = previousChunks[index];\n            if (chunk.key && chunk.dom.length) {\n                closeSubPartial();\n                // This is a keyed dom chunk that has already been rendered.\n                if (!prev || prev.dom !== chunk.dom) {\n                    lastNode[index ? 'after' : 'before'](...chunk.dom);\n                }\n                lastNode = chunk.dom[chunk.dom.length - 1];\n                // Note: we don't need to update keyed chunks expressions here because\n                // it is done in partial.add as soon as a keyed chunk is added to the\n                // partial.\n            }\n            else if (prev && chunk.html === prev.html && !prev.key) {\n                // We can reuse the DOM node, and need to swap the expressions. First\n                // close out any partial chunks. Then \"upgrade\" the expressions.\n                closeSubPartial();\n                prev.exp.forEach((expression, i) => expression._up(chunk.exp[i].e));\n                // We always want to reference the root expressions as long as the\n                // chunks remain equivalent, so here we explicitly point the new chunk's\n                // expression set to the original chunk expression set — which was just\n                // updated with the new expression's \"values\".\n                chunk.exp = prev.exp;\n                chunk.dom = prev.dom;\n                lastNode = chunk.dom[chunk.dom.length - 1];\n                if (isTextNodeChunk(chunk) && lastNode instanceof Text) {\n                    lastNode.nodeValue = chunk.tpl;\n                }\n            }\n            else {\n                if (prev && chunk.html !== prev.html && !prev.key) {\n                    // The previous chunk in this position has changed its underlying html\n                    // this happens when someone is using non-reactive values in the\n                    // template. We need to remove the previous nodes.\n                    toRemove.push(...prev.dom);\n                }\n                // Ok, now we're building some new DOM up y'all, let the chunking begin!\n                if (!subPartial.l)\n                    startChunking = index;\n                subPartial.add(chunk.tpl);\n            }\n        });\n        closeSubPartial();\n        let node = lastNode === null || lastNode === void 0 ? void 0 : lastNode.nextSibling;\n        while (node && group in node) {\n            toRemove.push(node);\n            const next = node.nextSibling;\n            node = next;\n        }\n        removeNodes(toRemove);\n        reset();\n    };\n    // What follows are internal \"methods\" for each partial.\n    const reset = () => {\n        toRemove.length = 0;\n        html = '';\n        partial.l = 0;\n        expressions = { i: 0, e: [] };\n        previousChunks = [...chunks];\n        chunks = [];\n    };\n    const addPlaceholderChunk = (node) => {\n        html = '<!---->';\n        chunks.push({\n            html,\n            exp: [],\n            dom: node ? [node] : [],\n            tpl: t `${html}`,\n            key: 0,\n        });\n    };\n    /**\n     * Walks through the document fragment and assigns the nodes to the correct\n     * DOM chunk. Chunks of DOM are divided by the bookend comment.\n     * @param frag - A document fragment that has been created from a partial\n     * @returns\n     */\n    const assignDomChunks = (frag) => {\n        let chunkIndex = 0;\n        const toRemove = [];\n        frag.childNodes.forEach((node) => {\n            if (node.nodeType === 8 && node.data === bookend) {\n                chunkIndex++;\n                // Remove the comment\n                toRemove.push(node);\n                return;\n            }\n            Object.defineProperty(node, group, { value: group });\n            chunks[chunkIndex].dom.push(node);\n        });\n        toRemove.forEach((node) => node.remove());\n        return frag;\n    };\n    const transferChunks = (partialA, chunksB, chunkIndex) => {\n        partialA.ch().forEach((chunk, index) => {\n            chunksB[chunkIndex + index].dom = chunk.dom;\n        });\n    };\n    return partial;\n}\n/**\n * Checks if a given chunk is a textNode chunk.\n * @param chunk - A partial chunk\n * @returns\n */\nfunction isTextNodeChunk(chunk) {\n    return chunk.dom.length === 1 && !isTpl(chunk.tpl);\n}\n", "import { t } from './html';\nimport { r, w } from './reactive';\n/**\n * html is an alias for t\n */\nexport const html = t;\n/**\n * reactive is an alias for r\n */\nexport const reactive = r;\n/**\n * watch is an alias for w\n */\nexport const watch = w;\nexport { t, r, w };\nexport { nextTick } from './common';\n// TODO: REMOVE THIS\nexport { measurements } from './common';\n"],
  "mappings": "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",
  "names": ["r", "queue", "fn", "property", "html", "tpl", "toRemove"]
}
